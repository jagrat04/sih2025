import sys
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QLabel, QVBoxLayout,
    QMessageBox, QTextEdit, QComboBox, QProgressBar
)
from PyQt5.QtGui import QFont # <--- FIX: Import QFont here
from drive_manager import list_drives
from wipe_manager import WipeThread
from certificate_viewer import CertificateViewer # Import the new viewer

class WiperApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("SecureWiper GUI")
        self.resize(700, 500)

        layout = QVBoxLayout()

        self.label = QLabel("Select a drive to wipe (method auto-selected per NIST):")
        layout.addWidget(self.label)

        # Drive dropdown
        self.drive_dropdown = QComboBox()
        layout.addWidget(self.drive_dropdown)
        
        # Add a dummy drive for testing without root
        self.drive_dropdown.addItem("DUMMY (5MB file for testing)", {"name": "dummy", "media_type": "Dummy Test", "serial": "DUMMY-001"})


        # Refresh button
        self.refresh_button = QPushButton("Refresh Drives")
        self.refresh_button.clicked.connect(self.load_drives)
        layout.addWidget(self.refresh_button)

        # Start wipe button
        self.wipe_button = QPushButton("Start Wipe")
        self.wipe_button.clicked.connect(self.start_wipe)
        layout.addWidget(self.wipe_button)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)  # indeterminate
        self.progress_bar.hide()
        layout.addWidget(self.progress_bar)

        # Log box
        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)
        self.log_box.setFont(QFont("Courier New", 9))
        layout.addWidget(self.log_box)

        self.setLayout(layout)
        self.load_drives()
        self.thread = None # To hold the worker thread

    def load_drives(self):
        # We keep the dummy entry, so we clear from index 1
        # This prevents removing the dummy drive on refresh
        while self.drive_dropdown.count() > 1:
            self.drive_dropdown.removeItem(1)
            
        drives = list_drives()
        for d in drives:
            if "error" in d:
                self.drive_dropdown.addItem(d["error"], None)
                continue
            display = f"{d['name']} | {d['size']} | {d['model']} | {d['media_type']} | {d.get('serial','')}"
            self.drive_dropdown.addItem(display, d)

    def start_wipe(self):
        drive_info = self.drive_dropdown.currentData()
        if not drive_info:
            QMessageBox.warning(self, "Error", "No drive selected")
            return

        confirm = QMessageBox.question(
            self,
            "Confirm Wipe",
            f"!!! ALL DATA WILL BE PERMANENTLY DESTROYED !!!\n\n"
            f"Are you absolutely sure you want to wipe {drive_info.get('name')} "
            f"({drive_info.get('media_type')})?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        if confirm != QMessageBox.Yes:
            return

        self.progress_bar.show()
        self.log_box.clear()
        self.wipe_button.setEnabled(False)
        self.refresh_button.setEnabled(False)

        self.thread = WipeThread(
            drive_info["name"],
            drive_info["media_type"],
            drive_info.get("serial")
        )
        self.thread.progress.connect(self.update_log)
        self.thread.finished.connect(self.wipe_done)
        self.thread.start()

    def update_log(self, line):
        self.log_box.append(line)
        self.log_box.verticalScrollBar().setValue(self.log_box.verticalScrollBar().maximum())


    def wipe_done(self, result):
        """
        This function is now more robust. It provides detailed feedback if
        certificate generation fails, otherwise it opens the viewer.
        """
        self.progress_bar.hide()
        self.wipe_button.setEnabled(True)
        self.refresh_button.setEnabled(True)
        
        self.log_box.append("\n=== WIPE PROCESS FINISHED ===")

        # More detailed check and logging
        if result is None:
            self.log_box.append("ERROR: Wipe thread returned no result object.")
            QMessageBox.critical(self, "Error", "Wipe thread failed unexpectedly.")
            return

        if not result.get("success", False):
             self.log_box.append("WARNING: Wipe process failed. Check logs above for details.")

        cert_data = result.get("cert_data")
        
        if not cert_data:
             self.log_box.append("\nERROR: Certificate data was not generated by the wipe thread.")
             self.log_box.append("This could be due to a file permission error or an issue in the report generator.")
             QMessageBox.critical(self, "Error", "Wipe completed, but failed to generate a valid certificate. Please check the log for errors.")
             return

        # Show the certificate viewer dialog if all checks pass
        self.log_box.append("Wipe successful. Opening certificate viewer...")
        cert_viewer = CertificateViewer(result, self)
        cert_viewer.exec_()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = WiperApp()
    window.show()
    sys.exit(app.exec_())

